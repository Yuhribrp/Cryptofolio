c
@crypto
c
@coins['data'].last
@coins['data'].size
@coins.data.size
@coins.size
@coins
c
connection.get.body.class
connection.get.body
connection.status
connection
connection.response
connection.get('json').body
connection.build_url
connection
c
response.class
response.response
response.Response
JSON.parse(response)
response
c
connection.build_url
connection.params
connection.methods
connection
response.status
response
c
@url
c
@url
JSON.parse(@response)
c
ENV['COIN_MARKET_API_KEY']
Figaro.env.COIN_MARKET_API_KEY
JSON.parse(@response)
c
JSON.parse(@response)
c
ENV['COIN_MARKET_API_KEY']
JSON.parse(@response)
c
coin
c
@coins
coin
c
coin
c
coin
crypto.symbol.upcase
crypto
c
crypto
c
coin
n
c
coin
c
crypto
c
coin
c
coin
c
crypto
coin
c
coin
c
coin
c
coin
c
coin
c
coin
c
crypto
coin
crypto
c
crypto.symbol.upcase.eql?(coin&.dig('symbol'))
crypto
crypto.eql?(coin&.dig('symbol'))
coin.symbol
coin
coin_data
crypto
c
crypto
@user_cryptos
@user_cryptos.count
@user_cryptos.index
@user_cryptos[0]
@user_cryptos
@user_cryptos.keys
@user_cryptos.first
@user_cryptos
c
@parsed_coins
c
@parsed_coins
c
Constants::CRYPTO_LIST.include?(coin['symbol'])
coin
coins
c
@coin_symbol
@coin_name
@coin_rank
c
parsed_coins
c
parsed_coins
c
parsed_coins
c
@parsed_coins
c
coins&.dig('data')
coins
c
@parsed_coins
c
parsed_coins
c
parsed_coins
@parsed_coins
c
coin
c
parsed_coins
c
@coin_rank
c
x['quote']['USD']['price']
 x['name']
x['cmc_rank']
x['symbol']
coin
c
Constants::CRYPTO_LIST.include?(coin)
coin
Constants::CRYPTO_LIST
c
@coins
@coins[:data]
c
@coins
coin
coin.first
c
coin['cmc_rank']
coin['quote']['USD']['price']
coin['name']
coin
c
@coins
c
